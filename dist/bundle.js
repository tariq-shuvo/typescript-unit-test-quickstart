(()=>{"use strict";var __webpack_modules__={288:()=>{eval("\n;// CONCATENATED MODULE: ./app/models/constants/UserTypes.ts\nvar UserType;\r\n(function (UserType) {\r\n    UserType[\"STUDENT\"] = \"STUDENT\";\r\n    UserType[\"PARENT\"] = \"PARENT\";\r\n    UserType[\"TEACHER\"] = \"TEACHER\";\r\n})(UserType || (UserType = {}));\r\n\n;// CONCATENATED MODULE: ./app/utils/ManageDOM.ts\nclass ManageDOM {\r\n    /**\r\n     * insertNewElementAppendById\r\n     */\r\n    insertNewElementAppendById(id, element) {\r\n        let node = document.getElementById(id);\r\n        node.insertAdjacentHTML(\"afterend\", element);\r\n    }\r\n    /**\r\n     * insertNewElementPrependById\r\n     */\r\n    insertNewElementPrependById(id, element) {\r\n        let node = document.getElementById(id);\r\n        node.insertAdjacentHTML(\"beforebegin\", element);\r\n    }\r\n    /**\r\n     * insertNewElementById\r\n     */\r\n    insertNewElementById(id, element) {\r\n        let node = document.getElementById(id);\r\n        node.innerHTML = element;\r\n    }\r\n    /**\r\n     * insertNewElementByClassName\r\n     */\r\n    insertNewElementByClassName(className, element) {\r\n        let nodes = document.getElementsByClassName(className);\r\n        console.log(nodes);\r\n    }\r\n    /**\r\n     * classAddToElement\r\n     */\r\n    classAddToElement(id, className) {\r\n        var element = document.getElementById(id);\r\n        element.classList.add(className);\r\n    }\r\n    /**\r\n     * classAddToElement\r\n     */\r\n    classRemoveFromElement(id, className) {\r\n        var element = document.getElementById(id);\r\n        element.classList.remove(className);\r\n    }\r\n}\r\n/* harmony default export */ const utils_ManageDOM = (ManageDOM);\r\n\n;// CONCATENATED MODULE: ./app/controller/User.ts\n\r\n//users storage variable\r\nlet users = [];\r\nclass User {\r\n    /**\r\n     * createUser\r\n     */\r\n    createUser(userInfoData) {\r\n        let userInfo = userInfoData;\r\n        users.push(userInfo);\r\n        return userInfo;\r\n    }\r\n    /**\r\n     * getAllUser\r\n     */\r\n    getAllUser() {\r\n        console.log(users);\r\n        let userList = ``;\r\n        users.map(user => {\r\n            userList += `<li>\r\n            <h4>${user.userType}(${user.userID})</h4>\r\n            <p>Name: ${user.userType.toLowerCase() != 'student' ? user.salutation : ''}${user.firstName + ' ' + user.lastName}</p>\r\n            <p>Email: ${user.email}</p>\r\n            </li>`;\r\n        });\r\n        new utils_ManageDOM().insertNewElementById('item-list', userList);\r\n    }\r\n    /**\r\n     * getSingleUserData\r\n     */\r\n    getSingleUserData(email) {\r\n        const userInfo = users.find(user => user.email === email);\r\n        return userInfo;\r\n    }\r\n    /**\r\n     * checkUserDuplicateEmail\r\n     */\r\n    checkUserDuplicateEmail(email) {\r\n        const userInfo = users.find(user => user.email === email);\r\n        return userInfo ? true : false;\r\n    }\r\n    /**\r\n     * checkUserDuplicateID\r\n     */\r\n    checkUserDuplicateID(id) {\r\n        const userInfo = users.find(user => user.userID === id);\r\n        return userInfo ? true : false;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./app/controller/Message.ts\n\r\n\r\n\r\n//messages storage variable\r\nlet messages = [];\r\nlet userCheckObj = new User();\r\nclass Message {\r\n    /**\r\n     * sendMessage\r\n     */\r\n    sendMessage(messageInfo) {\r\n        const fromUserInfo = userCheckObj.getSingleUserData(messageInfo.from);\r\n        const toUserInfo = userCheckObj.getSingleUserData(messageInfo.to);\r\n        if (fromUserInfo && toUserInfo) {\r\n            if (fromUserInfo.userType === UserType.TEACHER) {\r\n                messageInfo.fromUser = fromUserInfo;\r\n                messageInfo.toUser = toUserInfo;\r\n                messages.push(messageInfo);\r\n            }\r\n            else {\r\n                if (toUserInfo.userType === UserType.TEACHER) {\r\n                    messageInfo.fromUser = fromUserInfo;\r\n                    messageInfo.toUser = toUserInfo;\r\n                    messages.push(messageInfo);\r\n                }\r\n                else {\r\n                    new utils_ManageDOM().insertNewElementPrependById(\"sendMessage\", `<label class=\"error-color text-center\">student or parent can't sent message between them</label>`);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            new utils_ManageDOM().insertNewElementPrependById(\"sendMessage\", `<label class=\"error-color text-center\">Your input to email and from email invalid</label>`);\r\n        }\r\n        let messageData = messageInfo;\r\n        return messageData;\r\n    }\r\n    /**\r\n     * getAllUser\r\n     */\r\n    getAllMessage() {\r\n        let messageList = ``;\r\n        messages.map(message => {\r\n            messageList += `<li>\r\n            <h4>${message.fromUser.email} => ${message.toUser.email}</h4>\r\n            <p>From: ${message.fromUser.firstName + ' ' + message.fromUser.lastName}</p>\r\n            <p>Name: ${message.toUser.firstName + ' ' + message.toUser.lastName}</p>\r\n            <p>Email: ${message.message}</p>\r\n            </li>`;\r\n        });\r\n        new utils_ManageDOM().insertNewElementById('item-list-message', messageList);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./app/utils/FormData.ts\n\r\n\r\nconst formData = (form) => {\r\n    const inputs = form.querySelectorAll('input');\r\n    const textareas = form.querySelectorAll('textarea');\r\n    const selects = form.querySelectorAll('select');\r\n    const errorNodes = document.querySelectorAll('.error-color');\r\n    errorNodes.forEach(errorNode => {\r\n        errorNode.remove();\r\n    });\r\n    let formValidation = new utils_ManageDOM();\r\n    let values = {};\r\n    let errortFlag = false;\r\n    inputs.forEach(input => {\r\n        values[input.name] = input.value.toLowerCase();\r\n        if (input.value == '' && input.dataset.required == 'true') {\r\n            formValidation.insertNewElementAppendById(input.id, `<label class=\"error-color\">${input.dataset.title} empty field is not allowed</label>`);\r\n            values[input.name] = input.dataset.title + 'empty field is not allowed';\r\n            errortFlag = true;\r\n        }\r\n        if (input.name == 'userID') {\r\n            const checkUserDuplicateID = new User().checkUserDuplicateID(input.value.toLowerCase());\r\n            if (checkUserDuplicateID) {\r\n                formValidation.insertNewElementAppendById(input.id, `<label class=\"error-color\">${input.dataset.title} duplicate is not allowed</label>`);\r\n                values[input.name] = input.dataset.title + 'empty field is not allowed';\r\n                errortFlag = true;\r\n            }\r\n        }\r\n        if (input.name == 'email') {\r\n            const checkUserDuplicateID = new User().checkUserDuplicateEmail(input.value.toLowerCase());\r\n            if (checkUserDuplicateID) {\r\n                formValidation.insertNewElementAppendById(input.id, `<label class=\"error-color\">${input.dataset.title} duplicate is not allowed</label>`);\r\n                values[input.name] = input.dataset.title + 'empty field is not allowed';\r\n                errortFlag = true;\r\n            }\r\n        }\r\n    });\r\n    textareas.forEach(textarea => {\r\n        values[textarea.name] = textarea.value.toLowerCase();\r\n        if (textarea.value == '' && textarea.dataset.required == 'true') {\r\n            formValidation.insertNewElementAppendById(textarea.id, `<label class=\"error-color\">${textarea.dataset.title} empty field is not allowed</label>`);\r\n            values[textarea.name] = textarea.dataset.title + 'empty field is not allowed';\r\n            errortFlag = true;\r\n        }\r\n    });\r\n    selects.forEach(select => {\r\n        values[select.name] = select.options[select.selectedIndex].value;\r\n        if (select.options[select.selectedIndex].value == '' && select.dataset.required == 'true') {\r\n            formValidation.insertNewElementAppendById(select.id, `<label class=\"error-color\">${select.dataset.title} empty field is not allowed</label>`);\r\n            values[select.name] = select.dataset.title + 'empty field is not allowed';\r\n            errortFlag = true;\r\n        }\r\n    });\r\n    return { error: errortFlag, values };\r\n};\r\n\n;// CONCATENATED MODULE: ./app/index.ts\n\r\n\r\n\r\n\r\nconst app_form = document.querySelector('form#addUser');\r\nconst messageForm = document.querySelector('form#sendMessage');\r\nconst userTypeSelect = document.querySelector('select');\r\nconst userButton = document.querySelector('#manage-user-button');\r\nconst messagingButton = document.querySelector('#manage-messaging-button');\r\nconst userObj = new User();\r\nconst messageObj = new Message();\r\n//User Create\r\napp_form.addEventListener('submit', (e) => {\r\n    e.preventDefault();\r\n    const data = formData(app_form);\r\n    if (!data.error) {\r\n        userObj.createUser(data.values);\r\n        userObj.getAllUser();\r\n    }\r\n});\r\n//Send Message\r\nmessageForm.addEventListener('submit', (e) => {\r\n    e.preventDefault();\r\n    const data = formData(messageForm);\r\n    if (!data.error) {\r\n        messageObj.sendMessage(data.values);\r\n        messageObj.getAllMessage();\r\n    }\r\n});\r\n//Clicked manage user button\r\nuserButton.addEventListener('click', (e) => {\r\n    e.preventDefault();\r\n    userObj.getAllUser();\r\n    new utils_ManageDOM().classAddToElement('manage-messaging', 'invisible');\r\n    new utils_ManageDOM().classRemoveFromElement('manage-user', 'invisible');\r\n    new utils_ManageDOM().classAddToElement('manage-user', 'visible');\r\n});\r\n//Clicked messaging button\r\nmessagingButton.addEventListener('click', (e) => {\r\n    e.preventDefault();\r\n    new utils_ManageDOM().classAddToElement('manage-user', 'invisible');\r\n    new utils_ManageDOM().classRemoveFromElement('manage-messaging', 'invisible');\r\n    new utils_ManageDOM().classAddToElement('manage-messaging', 'visible');\r\n});\r\n//Change User Type For Salutation\r\nuserTypeSelect.addEventListener('change', (e) => {\r\n    e.preventDefault();\r\n    if (userTypeSelect.options[userTypeSelect.selectedIndex].value.toLowerCase() != 'student') {\r\n        new utils_ManageDOM().classRemoveFromElement('salutationField', 'invisible');\r\n        new utils_ManageDOM().classAddToElement('salutationField', 'visible');\r\n    }\r\n    else {\r\n        new utils_ManageDOM().classRemoveFromElement('salutationField', 'visible');\r\n        new utils_ManageDOM().classAddToElement('salutationField', 'invisible');\r\n    }\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///288\n")}},__webpack_exports__={};__webpack_modules__[288]()})();